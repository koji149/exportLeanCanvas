[{"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/index.js":"1","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/App.js":"2","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/Header.js":"3","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/Main.js":"4","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/Footer.js":"5","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/contexts/AppContext.js":"6","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/reducers/index.js":"7","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForDesktop/LeanCanvasForDesktop.js":"8","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForLaptop/LeanCanvasForLaptop.js":"9","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForTablet/LeanCanvasForTablet.js":"10","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForLaptop/ButtonGroupForLaptop.js":"11","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForTablet/ButtonGroupForTablet.js":"12","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForMobile/ButtonGroupForMobile.js":"13","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForMobile/LeanCanvasForMobile.js":"14","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForDesktop/ButtonGroupForDesktop.js":"15","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/reducers/LeanCanvasContentReducer.js":"16","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/actions/index.js":"17","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForTablet/TextClearButtonForTablet.js":"18","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/DownLoadSpredSheetButton.js":"19","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForTablet/DownLoadSpredSheetButtonForTabet.js":"20","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/AllTextClearButton.js":"21","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForMobile/TextClearButtonForMobile.js":"22","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ChangeColorTextButton.js":"23","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForMobile/DownLoadSpredSheetButtonForMobile.js":"24","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/FinishModal.js":"25","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/PreparationModal.js":"26","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/CustomizedProgressBars.js":"27","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/utilty/randomQuote.js":"28","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/env.js":"29"},{"size":366,"mtime":1614586222262,"results":"30","hashOfConfig":"31"},{"size":1081,"mtime":1614586222258,"results":"32","hashOfConfig":"31"},{"size":789,"mtime":1614586222261,"results":"33","hashOfConfig":"31"},{"size":10737,"mtime":1614595703077,"results":"34","hashOfConfig":"31"},{"size":1610,"mtime":1613435557151,"results":"35","hashOfConfig":"31"},{"size":104,"mtime":1613435557152,"results":"36","hashOfConfig":"31"},{"size":114,"mtime":1613435557152,"results":"37","hashOfConfig":"31"},{"size":14660,"mtime":1614586222259,"results":"38","hashOfConfig":"31"},{"size":14647,"mtime":1614586222260,"results":"39","hashOfConfig":"31"},{"size":11363,"mtime":1614586222261,"results":"40","hashOfConfig":"31"},{"size":1904,"mtime":1614586222260,"results":"41","hashOfConfig":"31"},{"size":1125,"mtime":1614586222261,"results":"42","hashOfConfig":"31"},{"size":1143,"mtime":1614586222260,"results":"43","hashOfConfig":"31"},{"size":10792,"mtime":1614586222260,"results":"44","hashOfConfig":"31"},{"size":1944,"mtime":1614586222259,"results":"45","hashOfConfig":"31"},{"size":901,"mtime":1614586222262,"results":"46","hashOfConfig":"31"},{"size":144,"mtime":1614586222258,"results":"47","hashOfConfig":"31"},{"size":1364,"mtime":1614586222261,"results":"48","hashOfConfig":"31"},{"size":2442,"mtime":1614586222259,"results":"49","hashOfConfig":"31"},{"size":2808,"mtime":1614586222261,"results":"50","hashOfConfig":"31"},{"size":1274,"mtime":1614586222258,"results":"51","hashOfConfig":"31"},{"size":1295,"mtime":1614586222260,"results":"52","hashOfConfig":"31"},{"size":1007,"mtime":1613435557151,"results":"53","hashOfConfig":"31"},{"size":2810,"mtime":1614586222260,"results":"54","hashOfConfig":"31"},{"size":2410,"mtime":1614586222259,"results":"55","hashOfConfig":"31"},{"size":2732,"mtime":1614604204524,"results":"56","hashOfConfig":"31"},{"size":1614,"mtime":1614586222259,"results":"57","hashOfConfig":"31"},{"size":2990,"mtime":1614603120713,"results":"58","hashOfConfig":"31"},{"size":75,"mtime":1613917179337,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"rrirq7",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/index.js",[],["127","128"],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/App.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/Header.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/Main.js",["129"],"import React, {useState, useContext, useRef} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport { useMediaQuery } from 'react-responsive'\r\nimport axios from 'axios'\r\n\r\nimport LeanCanvasForDesktop from './ForDesktop/LeanCanvasForDesktop';\r\nimport ButtonGroupForDesktop from './ForDesktop/ButtonGroupForDesktop';\r\nimport LeanCanvasForLaptop from './ForLaptop/LeanCanvasForLaptop';\r\nimport ButtonGroupForLaptop from './ForLaptop/ButtonGroupForLaptop';\r\nimport LeanCanvasForTablet from './ForTablet/LeanCanvasForTablet';\r\nimport ButtonGroupForTablet from './ForTablet/ButtonGroupForTablet';\r\nimport LeanCanvasForMobile from './ForMobile/LeanCanvasForMobile';\r\nimport ButtonGroupForMobile from './ForMobile/ButtonGroupForMobile';\r\n\r\nimport AppContext from \"../contexts/AppContext\"\r\nimport {ALL_TEXT_CLEAR, CREATE_LEAN_CANVAS, TEXT_CLEAR} from \"../actions\"\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: \"100%\",\r\n    flex: 1,\r\n    minHeight: \"100vh\",\r\n    position: \"relative\",\r\n    paddingBottom: 25,\r\n    boxSizing: 'border-box'\r\n  },\r\n  desktop: {\r\n    marginLeft: 8,\r\n    marginRight: 8,\r\n    display: \"flex\",\r\n    flexDirection: \"row\"\r\n  },\r\n  laptop: {\r\n    marginLeft: 8,\r\n    marginRight: 8,\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  tablet: {\r\n    marginLeft: 8,\r\n    marginRight: 8,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    position: \"relative\"\r\n  },\r\n  mobile: {\r\n    marginLeft: 8,\r\n    marginRight: 8,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    position: \"relative\"\r\n  }\r\n});\r\n\r\nconst Main = () => {\r\n  const classes = useStyles();\r\n\r\n  const [problem, setProblem] = useState(\"\")\r\n  const [alternatives, setAlternatives] = useState(\"\")\r\n  const [customer, setCustomer] = useState(\"\")\r\n  const [earlyAdopters, setEarlyAdopters] = useState(\"\")\r\n  const [uniqueValue, setUniqueValue] = useState(\"\")\r\n  const [solution, setSolution] = useState(\"\")\r\n  const [channels, setChannels] = useState(\"\")\r\n  const [revenue, setRevenue] = useState(\"\")\r\n  const [cost, setCost] = useState(\"\")\r\n  const [keyMetrics, setKeyMetrics] = useState(\"\")\r\n  const [unfairAdvantage, setUnfairAdvantage] = useState(\"\")\r\n\r\n  const [spredSheetUrl, setSpredSheetUrl] = useState(\"\")\r\n  const [isArrivedUrl, setIsArrivedUrl] = useState(false)\r\n\r\n  const isFirstRender = useRef(false)\r\n\r\n  const { state, dispatch} = useContext(AppContext)\r\n\r\n  const isDesktop = useMediaQuery({ minWidth: 1280 })\r\n  const isLaptop = useMediaQuery({ minWidth: 1076, maxWidth: 1280 })\r\n  const isTablet = useMediaQuery({ minWidth: 768, maxWidth: 1075 })\r\n  const isMobile = useMediaQuery({ maxWidth: 767 })\r\n\r\n  // require('dotenv').config();\r\n  const REACT_APP_API_URL = process.env.REACT_APP_API_URL;\r\n\r\n  const createLeanCanvas = e => {\r\n    if (isFirstRender.current) {\r\n      isFirstRender.current = false\r\n    } else {\r\n      dispatch({\r\n        type: CREATE_LEAN_CANVAS,\r\n        problem,\r\n        alternatives,\r\n        customer,\r\n        earlyAdopters,\r\n        uniqueValue,\r\n        solution,\r\n        channels,\r\n        revenue,\r\n        cost,\r\n        keyMetrics,\r\n        unfairAdvantage\r\n      })\r\n      axios({\r\n        method : \"POST\",\r\n        url : REACT_APP_API_URL,\r\n        data : { problem: problem,\r\n          alternatives: alternatives,\r\n          customer: customer,\r\n          earlyAdopters: earlyAdopters,\r\n          uniqueValue: uniqueValue,\r\n          solution: solution,\r\n          channels: channels,\r\n          revenue: revenue,\r\n          cost: cost,\r\n          keyMetrics: keyMetrics,\r\n          unfairAdvantage: unfairAdvantage\r\n        }\r\n      })\r\n      .then((response)=> {\r\n        setSpredSheetUrl(`https://docs.google.com/spreadsheets/d/${response.data}/edit`)\r\n        setIsArrivedUrl(true)\r\n        console.log(\"成功\")\r\n      })\r\n      .catch((error)=> {\r\n        console.log(error)\r\n        console.log(\"失敗\")\r\n      });\r\n    }\r\n  }\r\n\r\n  const allTextClear = e => {\r\n    dispatch({\r\n      type: ALL_TEXT_CLEAR,\r\n    })\r\n  }\r\n\r\n  const textClear = e => {\r\n    const id = e.id\r\n    dispatch({\r\n      type: TEXT_CLEAR,\r\n      id\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {isDesktop ?\r\n      <Box className={classes.desktop}>\r\n        <LeanCanvasForDesktop\r\n          problem={problem}\r\n          setProblem={setProblem}\r\n          alternatives={alternatives}\r\n          setAlternatives={setAlternatives}\r\n          customer={customer}\r\n          setCustomer={setCustomer}\r\n          earlyAdopters={earlyAdopters}\r\n          setEarlyAdopters={setEarlyAdopters}\r\n          uniqueValue={uniqueValue}\r\n          setUniqueValue={setUniqueValue}\r\n          solution={solution}\r\n          setSolution={setSolution}\r\n          channels={channels}\r\n          setChannels={setChannels}\r\n          revenue={revenue}\r\n          setRevenue={setRevenue}\r\n          cost={cost}\r\n          setCost={setCost}\r\n          keyMetrics={keyMetrics}\r\n          setKeyMetrics={setKeyMetrics}\r\n          unfairAdvantage={unfairAdvantage}\r\n          setUnfairAdvantage={setUnfairAdvantage}\r\n          />\r\n        <ButtonGroupForDesktop\r\n          createLeanCanvas={createLeanCanvas}\r\n          allTextClear={allTextClear}\r\n          setProblem={setProblem}\r\n          setAlternatives={setAlternatives}\r\n          setCustomer={setCustomer}\r\n          setEarlyAdopters={setEarlyAdopters}\r\n          setUniqueValue={setUniqueValue}\r\n          setSolution={setSolution}\r\n          setChannels={setChannels}\r\n          setRevenue={setRevenue}\r\n          setCost={setCost}\r\n          setKeyMetrics={setKeyMetrics}\r\n          setUnfairAdvantage={setUnfairAdvantage}\r\n          spredSheetUrl={spredSheetUrl}\r\n          isArrivedUrl={isArrivedUrl}\r\n          setIsArrivedUrl={setIsArrivedUrl}\r\n        />\r\n      </Box> : null\r\n    }\r\n    {isLaptop ?\r\n      <Box className={classes.laptop}>\r\n        <LeanCanvasForLaptop\r\n          problem={problem}\r\n          setProblem={setProblem}\r\n          alternatives={alternatives}\r\n          setAlternatives={setAlternatives}\r\n          customer={customer}\r\n          setCustomer={setCustomer}\r\n          earlyAdopters={earlyAdopters}\r\n          setEarlyAdopters={setEarlyAdopters}\r\n          uniqueValue={uniqueValue}\r\n          setUniqueValue={setUniqueValue}\r\n          solution={solution}\r\n          setSolution={setSolution}\r\n          channels={channels}\r\n          setChannels={setChannels}\r\n          revenue={revenue}\r\n          setRevenue={setRevenue}\r\n          cost={cost}\r\n          setCost={setCost}\r\n          keyMetrics={keyMetrics}\r\n          setKeyMetrics={setKeyMetrics}\r\n          unfairAdvantage={unfairAdvantage}\r\n          setUnfairAdvantage={setUnfairAdvantage}\r\n          />\r\n        <ButtonGroupForLaptop\r\n          createLeanCanvas={createLeanCanvas}\r\n          allTextClear={allTextClear}\r\n          setProblem={setProblem}\r\n          setAlternatives={setAlternatives}\r\n          setCustomer={setCustomer}\r\n          setEarlyAdopters={setEarlyAdopters}\r\n          setUniqueValue={setUniqueValue}\r\n          setSolution={setSolution}\r\n          setChannels={setChannels}\r\n          setRevenue={setRevenue}\r\n          setCost={setCost}\r\n          setKeyMetrics={setKeyMetrics}\r\n          setUnfairAdvantage={setUnfairAdvantage}\r\n          spredSheetUrl={spredSheetUrl}\r\n          isArrivedUrl={isArrivedUrl}\r\n          setIsArrivedUrl={setIsArrivedUrl}\r\n        />\r\n      </Box> : null\r\n    }\r\n    {isTablet ?\r\n      <Box className={classes.tablet}>\r\n        <LeanCanvasForTablet\r\n          problem={problem}\r\n          setProblem={setProblem}\r\n          alternatives={alternatives}\r\n          setAlternatives={setAlternatives}\r\n          customer={customer}\r\n          setCustomer={setCustomer}\r\n          earlyAdopters={earlyAdopters}\r\n          setEarlyAdopters={setEarlyAdopters}\r\n          uniqueValue={uniqueValue}\r\n          setUniqueValue={setUniqueValue}\r\n          solution={solution}\r\n          setSolution={setSolution}\r\n          channels={channels}\r\n          setChannels={setChannels}\r\n          revenue={revenue}\r\n          setRevenue={setRevenue}\r\n          cost={cost}\r\n          setCost={setCost}\r\n          keyMetrics={keyMetrics}\r\n          setKeyMetrics={setKeyMetrics}\r\n          unfairAdvantage={unfairAdvantage}\r\n          setUnfairAdvantage={setUnfairAdvantage}\r\n          textClear={textClear}\r\n          />\r\n        <ButtonGroupForTablet\r\n          createLeanCanvas={createLeanCanvas}\r\n          setProblem={setProblem}\r\n          setAlternatives={setAlternatives}\r\n          setCustomer={setCustomer}\r\n          setEarlyAdopters={setEarlyAdopters}\r\n          setUniqueValue={setUniqueValue}\r\n          setSolution={setSolution}\r\n          setChannels={setChannels}\r\n          setRevenue={setRevenue}\r\n          setCost={setCost}\r\n          setKeyMetrics={setKeyMetrics}\r\n          setUnfairAdvantage={setUnfairAdvantage}\r\n          spredSheetUrl={spredSheetUrl}\r\n          isArrivedUrl={isArrivedUrl}\r\n          setIsArrivedUrl={setIsArrivedUrl}\r\n        />\r\n      </Box> : null\r\n    }\r\n    {isMobile ?\r\n      <Box className={classes.mobile}>\r\n        <LeanCanvasForMobile\r\n          problem={problem}\r\n          setProblem={setProblem}\r\n          alternatives={alternatives}\r\n          setAlternatives={setAlternatives}\r\n          customer={customer}\r\n          setCustomer={setCustomer}\r\n          earlyAdopters={earlyAdopters}\r\n          setEarlyAdopters={setEarlyAdopters}\r\n          uniqueValue={uniqueValue}\r\n          setUniqueValue={setUniqueValue}\r\n          solution={solution}\r\n          setSolution={setSolution}\r\n          channels={channels}\r\n          setChannels={setChannels}\r\n          revenue={revenue}\r\n          setRevenue={setRevenue}\r\n          cost={cost}\r\n          setCost={setCost}\r\n          keyMetrics={keyMetrics}\r\n          setKeyMetrics={setKeyMetrics}\r\n          unfairAdvantage={unfairAdvantage}\r\n          setUnfairAdvantage={setUnfairAdvantage}\r\n          textClear={textClear}\r\n          />\r\n        <ButtonGroupForMobile\r\n          createLeanCanvas={createLeanCanvas}\r\n          setProblem={setProblem}\r\n          setAlternatives={setAlternatives}\r\n          setCustomer={setCustomer}\r\n          setEarlyAdopters={setEarlyAdopters}\r\n          setUniqueValue={setUniqueValue}\r\n          setSolution={setSolution}\r\n          setChannels={setChannels}\r\n          setRevenue={setRevenue}\r\n          setCost={setCost}\r\n          setKeyMetrics={setKeyMetrics}\r\n          setUnfairAdvantage={setUnfairAdvantage}\r\n          spredSheetUrl={spredSheetUrl}\r\n          isArrivedUrl={isArrivedUrl}\r\n          setIsArrivedUrl={setIsArrivedUrl}\r\n        />\r\n      </Box> : null\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Main;","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/Footer.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/contexts/AppContext.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/reducers/index.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForDesktop/LeanCanvasForDesktop.js",["130"],"import React, {useEffect, useRef} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport {\r\n  fade,\r\n} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flex: 0.9\r\n  },\r\n  container: {\r\n    marginTop: \"3%\",\r\n    marginBottom: \"3%\",\r\n    marginLeft: 8,\r\n    marginRight: 8,\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  containerTopRatio: {\r\n    flex: 0.8\r\n  },\r\n  topContent:{\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  gridItemTwoVertical: {\r\n    position: 'relative',\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  gridItemOnlyOne: {\r\n    position: 'relative',\r\n  },\r\n  containerBottomRatio: {\r\n    flex: 0.2\r\n  },\r\n  gridItemTwoRow: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  toolTipSmall: {\r\n    position: 'absolute',\r\n    zIndex: 2,\r\n    top:8,\r\n    right: 10\r\n  },\r\n  toolTipMedium: {\r\n    position: 'absolute',\r\n    zIndex: 2,\r\n    top: 8,\r\n    right: 10\r\n  },\r\n  toolTipLarge: {\r\n    position: 'absolute',\r\n    zIndex: 2,\r\n    top: 8,\r\n    right: 10\r\n  },\r\n  color: {\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\n\r\nconst useStylesFormSmall = makeStyles((theme) => ({\r\n  root: {\r\n    borderTop: '2px solid #e2e2e1',\r\n    borderBottom: '2px solid #e2e2e1',\r\n    borderLeft: '2px solid #e2e2e1',\r\n    borderRight: '2px solid #e2e2e1',\r\n    overflow: 'hidden',\r\n    borderRadius: 0,\r\n    backgroundColor: '#fff',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    '&:hover': {\r\n      backgroundColor: '#fafafa',\r\n      borderColor: \"#c8c8c8\",\r\n    },\r\n    '&$focused': {\r\n      backgroundColor: '#fff',\r\n      boxshadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px inset`,\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  focused: {},\r\n}));\r\nconst useStylesFormMedium = makeStyles((theme) => ({\r\n  root: {\r\n    borderTop: '4px solid #e2e2e1',\r\n    borderBottom: '3px solid #e2e2e1',\r\n    borderLeft: '2px solid #e2e2e1',\r\n    borderRight: '2px solid #e2e2e1',\r\n    overflow: 'hidden',\r\n    borderRadius: 0,\r\n    backgroundColor: '#fff',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    '&:hover': {\r\n      backgroundColor: '#fafafa',\r\n      borderColor: \"#c8c8c8\",\r\n    },\r\n    '&$focused': {\r\n      backgroundColor: '#fff',\r\n      boxshadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px inset`,\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  focused: {},\r\n}));\r\n\r\nconst FormTextField = ({formType, ...props}) => {\r\n  const FormMedium = useStylesFormMedium()\r\n  const FormSmall = useStylesFormSmall()\r\n  const classes = formType ? FormMedium : FormSmall\r\n\r\n  return <TextField InputProps={{ classes, disableUnderline: true }} {...props} />;\r\n}\r\n\r\nconst LeanCanvasForDesktop = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const {\r\n    problem,\r\n    setProblem,\r\n    alternatives,\r\n    setAlternatives,\r\n    customer,\r\n    setCustomer,\r\n    earlyAdopters,\r\n    setEarlyAdopters,\r\n    uniqueValue,\r\n    setUniqueValue,\r\n    solution,\r\n    setSolution,\r\n    channels,\r\n    setChannels,\r\n    revenue,\r\n    setRevenue,\r\n    cost,\r\n    setCost,\r\n    keyMetrics,\r\n    setKeyMetrics,\r\n    unfairAdvantage,\r\n    setUnfairAdvantage\r\n  } = props\r\n\r\n  const PLOBLEM_KEY = 'problem'\r\n  const ALTERNATIVES_KEY = 'alternatives'\r\n  const CUSTOMER_KEY = 'customer'\r\n  const EARLYADOPTERS_KEY = 'earlyAdopters'\r\n  const UNIQUEVALUE_KEY = 'uniqueValue'\r\n  const SOLUTION_KEY = 'solution'\r\n  const CHANNELS_KEY = 'channels'\r\n  const REVENUE_KEY = 'revenue'\r\n  const COST_KEY = 'cost'\r\n  const KEYMETRICS_KEY = 'keyMetrics'\r\n  const UNFAIRADVANTAGE_KEY = 'unfairAdvantage'\r\n\r\n  const initValue = (key, dispatch) => {\r\n    const initVal = sessionStorage.getItem(key);\r\n    dispatch(initVal ? JSON.parse(initVal) : \"\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    initValue(PLOBLEM_KEY, setProblem)\r\n    initValue(ALTERNATIVES_KEY, setAlternatives)\r\n    initValue(CUSTOMER_KEY, setCustomer)\r\n    initValue(EARLYADOPTERS_KEY, setEarlyAdopters)\r\n    initValue(UNIQUEVALUE_KEY, setUniqueValue)\r\n    initValue(SOLUTION_KEY, setSolution)\r\n    initValue(CHANNELS_KEY, setChannels)\r\n    initValue(REVENUE_KEY, setRevenue)\r\n    initValue(COST_KEY, setCost)\r\n    initValue(KEYMETRICS_KEY, setKeyMetrics)\r\n    initValue(UNFAIRADVANTAGE_KEY, setUnfairAdvantage)\r\n  }, []);\r\n\r\n  const mounted = useRef(false)\r\n  useEffect(() => {\r\n    if(mounted.current) {\r\n      sessionStorage[PLOBLEM_KEY] = JSON.stringify(problem);\r\n      sessionStorage[ALTERNATIVES_KEY] = JSON.stringify(alternatives);\r\n      sessionStorage[CUSTOMER_KEY] = JSON.stringify(customer);\r\n      sessionStorage[EARLYADOPTERS_KEY] = JSON.stringify(earlyAdopters);\r\n      sessionStorage[UNIQUEVALUE_KEY] = JSON.stringify(uniqueValue);\r\n      sessionStorage[SOLUTION_KEY] = JSON.stringify(solution);\r\n      sessionStorage[CHANNELS_KEY] = JSON.stringify(channels);\r\n      sessionStorage[REVENUE_KEY] = JSON.stringify(revenue);\r\n      sessionStorage[COST_KEY] = JSON.stringify(cost);\r\n      sessionStorage[KEYMETRICS_KEY] = JSON.stringify(keyMetrics);\r\n      sessionStorage[UNFAIRADVANTAGE_KEY] = JSON.stringify(unfairAdvantage);\r\n    } else {\r\n      mounted.current = true\r\n    }\r\n  }, [problem, alternatives, customer, earlyAdopters, uniqueValue, solution, channels, revenue, cost, keyMetrics, unfairAdvantage])\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Box className={classes.container}>\r\n        <Paper elevation={3} >\r\n          <Box className={classes.containerTopRatio}>\r\n          <Grid container className={classes.topContent}>\r\n            <Grid item xs >\r\n              <Grid container item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"上位三つの課題を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                  <FormTextField\r\n                    label=\"①課題\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    formType={false}\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={problem}\r\n                    onChange={e => setProblem(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"既存の代替品を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"②既存の代替品\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={alternatives}\r\n                  onChange={e => setAlternatives(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Grid container item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"具体的な解決策の上位三つを記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                    label=\"⑥ソリューション\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    formType={false}\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={solution}\r\n                    onChange={e => setSolution(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"PMFにたどり着くまでに計測すべき指標を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                    <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"⑩主要指標\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={keyMetrics}\r\n                  onChange={e => setKeyMetrics(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs className={classes.gridItemOnlyOne}>\r\n              <Tooltip title=\"他とは違っていて注目する価値がある理由を記載します。\" placement=\"top\" className={classes.toolTipMedium}>\r\n                <InfoOutlinedIcon color=\"action\" />\r\n              </Tooltip>\r\n              <FormTextField\r\n                  label=\"⑤独自の価値提案\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={true}\r\n                  multiline\r\n                  rows={16}\r\n                  fullWidth\r\n                  value={uniqueValue}\r\n                  onChange={e => setUniqueValue(e.target.value)}\r\n                />\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Grid container item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"競合に対しての圧倒的な優位性を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"⑪圧倒的な優位性\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={unfairAdvantage}\r\n                  onChange={e => setUnfairAdvantage(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"顧客にリーチする経路を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"⑦チャネル\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={channels}\r\n                  onChange={e => setChannels(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs >\r\n              <Grid container item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"顧客の特徴を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                  <FormTextField\r\n                    label=\"③顧客セグメント\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    formType={false}\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={customer}\r\n                    onChange={e => setCustomer(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid container item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"課題に対して積極的に代替策を探している人の特徴を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                  <FormTextField\r\n                    label=\"④アーリーアダプター\"\r\n                    className={classes.margin}\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    formType={false}\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={earlyAdopters}\r\n                    onChange={e => setEarlyAdopters(e.target.value)}\r\n                  />\r\n                </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          </Box>\r\n          <Box className={classes.containerBottomRatio}>\r\n            <Grid container className={classes.gridItemTwoRow}>\r\n              <Grid item xs className={classes.gridItemOnlyOne}>\r\n                <Tooltip title=\"市場に送り出すまでにかかるコストを記載します。\" placement=\"top\" className={classes.toolTipLarge}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"⑨コスト構造\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={revenue}\r\n                  onChange={e => setRevenue(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.gridItemOnlyOne}>\r\n                <Tooltip title=\"どのような課金形態になるのかを記載します。\" placement=\"top\" className={classes.toolTipLarge}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"⑧収益の流れ\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={cost}\r\n                  onChange={e => setCost(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Paper>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default LeanCanvasForDesktop","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForLaptop/LeanCanvasForLaptop.js",["131"],"import React, {useEffect, useRef} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport {\r\n  fade,\r\n} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n  },\r\n  container: {\r\n    marginTop: \"3%\",\r\n    marginBottom: \"1%\",\r\n    marginLeft: 8,\r\n    marginRight: 8,\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  containerTopRatio: {\r\n    flex: 0.8\r\n  },\r\n  topContent:{\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  gridItemTwoVertical: {\r\n    position: 'relative',\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  gridItemOnlyOne: {\r\n    position: 'relative',\r\n  },\r\n  containerBottomRatio: {\r\n    flex: 0.2\r\n  },\r\n  gridItemTwoRow: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  toolTipSmall: {\r\n    position: 'absolute',\r\n    zIndex: 2,\r\n    top: 6,\r\n    right: 10\r\n  },\r\n  toolTipMedium: {\r\n    position: 'absolute',\r\n    zIndex: 2,\r\n    top: 6,\r\n    right: 10,\r\n  },\r\n  toolTipLarge: {\r\n    position: 'absolute',\r\n    zIndex: 2,\r\n    top: 6,\r\n    right: 10\r\n  },\r\n  color: {\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\n\r\nconst useStylesFormSmall = makeStyles((theme) => ({\r\n  root: {\r\n    borderTop: '2px solid #e2e2e1',\r\n    borderBottom: '2px solid #e2e2e1',\r\n    borderLeft: '2px solid #e2e2e1',\r\n    borderRight: '2px solid #e2e2e1',\r\n    overflow: 'hidden',\r\n    borderRadius: 0,\r\n    backgroundColor: '#fff',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    '&:hover': {\r\n      backgroundColor: '#fafafa',\r\n      borderColor: \"#c8c8c8\",\r\n    },\r\n    '&$focused': {\r\n      backgroundColor: '#fff',\r\n      boxshadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px inset`,\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  focused: {},\r\n}));\r\nconst useStylesFormMedium = makeStyles((theme) => ({\r\n  root: {\r\n    borderTop: '4px solid #e2e2e1',\r\n    borderBottom: '3px solid #e2e2e1',\r\n    borderLeft: '2px solid #e2e2e1',\r\n    borderRight: '2px solid #e2e2e1',\r\n    overflow: 'hidden',\r\n    borderRadius: 0,\r\n    backgroundColor: '#fff',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    '&:hover': {\r\n      backgroundColor: '#fafafa',\r\n      borderColor: \"#c8c8c8\",\r\n    },\r\n    '&$focused': {\r\n      backgroundColor: '#fff',\r\n      boxshadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px inset`,\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  focused: {},\r\n}));\r\n\r\nconst FormTextField = ({formType, ...props}) => {\r\n  const FormMedium = useStylesFormMedium()\r\n  const FormSmall = useStylesFormSmall()\r\n  const classes = formType ? FormMedium : FormSmall\r\n\r\n  return <TextField InputProps={{ classes, disableUnderline: true }} {...props} />;\r\n}\r\n\r\nconst LeanCanvasForLaptop = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const {\r\n    problem,\r\n    setProblem,\r\n    alternatives,\r\n    setAlternatives,\r\n    customer,\r\n    setCustomer,\r\n    earlyAdopters,\r\n    setEarlyAdopters,\r\n    uniqueValue,\r\n    setUniqueValue,\r\n    solution,\r\n    setSolution,\r\n    channels,\r\n    setChannels,\r\n    revenue,\r\n    setRevenue,\r\n    cost,\r\n    setCost,\r\n    keyMetrics,\r\n    setKeyMetrics,\r\n    unfairAdvantage,\r\n    setUnfairAdvantage\r\n  } = props\r\n\r\n  const PLOBLEM_KEY = 'problem'\r\n  const ALTERNATIVES_KEY = 'alternatives'\r\n  const CUSTOMER_KEY = 'customer'\r\n  const EARLYADOPTERS_KEY = 'earlyAdopters'\r\n  const UNIQUEVALUE_KEY = 'uniqueValue'\r\n  const SOLUTION_KEY = 'solution'\r\n  const CHANNELS_KEY = 'channels'\r\n  const REVENUE_KEY = 'revenue'\r\n  const COST_KEY = 'cost'\r\n  const KEYMETRICS_KEY = 'keyMetrics'\r\n  const UNFAIRADVANTAGE_KEY = 'unfairAdvantage'\r\n\r\n  const initValue = (key, dispatch) => {\r\n    const initVal = sessionStorage.getItem(key);\r\n    dispatch(initVal ? JSON.parse(initVal) : \"\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    initValue(PLOBLEM_KEY, setProblem)\r\n    initValue(ALTERNATIVES_KEY, setAlternatives)\r\n    initValue(CUSTOMER_KEY, setCustomer)\r\n    initValue(EARLYADOPTERS_KEY, setEarlyAdopters)\r\n    initValue(UNIQUEVALUE_KEY, setUniqueValue)\r\n    initValue(SOLUTION_KEY, setSolution)\r\n    initValue(CHANNELS_KEY, setChannels)\r\n    initValue(REVENUE_KEY, setRevenue)\r\n    initValue(COST_KEY, setCost)\r\n    initValue(KEYMETRICS_KEY, setKeyMetrics)\r\n    initValue(UNFAIRADVANTAGE_KEY, setUnfairAdvantage)\r\n  }, []);\r\n\r\n  const mounted = useRef(false)\r\n  useEffect(() => {\r\n    if(mounted.current) {\r\n      sessionStorage[PLOBLEM_KEY] = JSON.stringify(problem);\r\n      sessionStorage[ALTERNATIVES_KEY] = JSON.stringify(alternatives);\r\n      sessionStorage[CUSTOMER_KEY] = JSON.stringify(customer);\r\n      sessionStorage[EARLYADOPTERS_KEY] = JSON.stringify(earlyAdopters);\r\n      sessionStorage[UNIQUEVALUE_KEY] = JSON.stringify(uniqueValue);\r\n      sessionStorage[SOLUTION_KEY] = JSON.stringify(solution);\r\n      sessionStorage[CHANNELS_KEY] = JSON.stringify(channels);\r\n      sessionStorage[REVENUE_KEY] = JSON.stringify(revenue);\r\n      sessionStorage[COST_KEY] = JSON.stringify(cost);\r\n      sessionStorage[KEYMETRICS_KEY] = JSON.stringify(keyMetrics);\r\n      sessionStorage[UNFAIRADVANTAGE_KEY] = JSON.stringify(unfairAdvantage);\r\n    } else {\r\n      mounted.current = true\r\n    }\r\n  }, [problem, alternatives, customer, earlyAdopters, uniqueValue, solution, channels, revenue, cost, keyMetrics, unfairAdvantage])\r\n\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Box className={classes.container}>\r\n        <Paper elevation={3} >\r\n          <Box className={classes.containerTopRatio}>\r\n          <Grid container className={classes.topContent}>\r\n            <Grid item xs >\r\n              <Grid container item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"上位三つの課題を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                  <FormTextField\r\n                    label=\"①課題\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    formType={false}\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={problem}\r\n                    onChange={e => setProblem(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"既存の代替品を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"②既存の代替品\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={alternatives}\r\n                  onChange={e => setAlternatives(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Grid container item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"具体的な解決策の上位三つを記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                    label=\"⑥ソリューション\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    formType={false}\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={solution}\r\n                    onChange={e => setSolution(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"PMFにたどり着くまでに計測すべき指標を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                    <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"⑩主要指標\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={keyMetrics}\r\n                  onChange={e => setKeyMetrics(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs className={classes.gridItemOnlyOne}>\r\n              <Tooltip title=\"他とは違っていて注目する価値がある理由を記載します。\" placement=\"top\" className={classes.toolTipMedium}>\r\n                <InfoOutlinedIcon color=\"action\" />\r\n              </Tooltip>\r\n              <FormTextField\r\n                  label=\"⑤独自の価値提案\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={true}\r\n                  multiline\r\n                  rows={16}\r\n                  fullWidth\r\n                  value={uniqueValue}\r\n                  onChange={e => setUniqueValue(e.target.value)}\r\n                />\r\n            </Grid>\r\n            <Grid item xs>\r\n              <Grid container item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"競合に対しての圧倒的な優位性を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"⑪圧倒的な優位性\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={unfairAdvantage}\r\n                  onChange={e => setUnfairAdvantage(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"顧客にリーチする経路を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"⑦チャネル\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={channels}\r\n                  onChange={e => setChannels(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item xs >\r\n              <Grid container item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"顧客の特徴を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                  <FormTextField\r\n                    label=\"③顧客セグメント\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    formType={false}\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={customer}\r\n                    onChange={e => setCustomer(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid container item xs className={classes.gridItemTwoVertical}>\r\n                <Tooltip title=\"課題に対して積極的に代替策を探している人の特徴を記載します。\" placement=\"top\" className={classes.toolTipSmall}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                  <FormTextField\r\n                    label=\"④アーリーアダプター\"\r\n                    className={classes.margin}\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    formType={false}\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={earlyAdopters}\r\n                    onChange={e => setEarlyAdopters(e.target.value)}\r\n                  />\r\n                </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          </Box>\r\n          <Box className={classes.containerBottomRatio}>\r\n            <Grid container className={classes.gridItemTwoRow}>\r\n              <Grid item xs className={classes.gridItemOnlyOne}>\r\n                <Tooltip title=\"市場に送り出すまでにかかるコストを記載します。\" placement=\"top\" className={classes.toolTipLarge}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"⑨コスト構造\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={revenue}\r\n                  onChange={e => setRevenue(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.gridItemOnlyOne}>\r\n                <Tooltip title=\"どのような課金形態になるのかを記載します。\" placement=\"top\" className={classes.toolTipLarge}>\r\n                  <InfoOutlinedIcon color=\"action\" />\r\n                </Tooltip>\r\n                <FormTextField\r\n                  label=\"⑧収益の流れ\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  formType={false}\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={cost}\r\n                  onChange={e => setCost(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Paper>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default LeanCanvasForLaptop","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForTablet/LeanCanvasForTablet.js",["132"],"import React, {useEffect, useRef} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n  fade,\r\n} from '@material-ui/core/styles';\r\n\r\nimport TextClearButtonForTablet from './TextClearButtonForTablet'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    paddingBottom: 120\r\n  },\r\n  container: {\r\n    marginTop: \"3%\",\r\n    marginBottom: \"3%\",\r\n    marginLeft: 8,\r\n    marginRight: 8,\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  glidItemsHorizontal: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  glidItem: {\r\n    position: 'relative',\r\n  },\r\n  gridItemTwoRow: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  color: {\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\n\r\nconst useStylesForm = makeStyles((theme) => ({\r\n  root: {\r\n    borderTop: '3px solid #e2e2e1',\r\n    borderBottom: '3px solid #e2e2e1',\r\n    borderLeft: '3px solid #e2e2e1',\r\n    borderRight: '3px solid #e2e2e1',\r\n    overflow: 'hidden',\r\n    borderRadius: 0,\r\n    backgroundColor: '#fff',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    '&:hover': {\r\n      backgroundColor: '#fafafa',\r\n      borderColor: \"#c8c8c8\",\r\n    },\r\n    '&$focused': {\r\n      backgroundColor: '#fff',\r\n      boxshadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px inset`,\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  focused: {},\r\n}));\r\n\r\nconst FormTextField = ({...props}) => {\r\n  const classes = useStylesForm()\r\n  return <TextField InputProps={{ classes, disableUnderline: true }} {...props} />;\r\n}\r\n\r\nconst LeanCanvasForTablet = (props) => {\r\n  const classes = useStyles();\r\n  const {\r\n    problem,\r\n    setProblem,\r\n    alternatives,\r\n    setAlternatives,\r\n    customer,\r\n    setCustomer,\r\n    earlyAdopters,\r\n    setEarlyAdopters,\r\n    uniqueValue,\r\n    setUniqueValue,\r\n    solution,\r\n    setSolution,\r\n    channels,\r\n    setChannels,\r\n    revenue,\r\n    setRevenue,\r\n    cost,\r\n    setCost,\r\n    keyMetrics,\r\n    setKeyMetrics,\r\n    unfairAdvantage,\r\n    setUnfairAdvantage,\r\n    textClear\r\n  } = props\r\n\r\n  const PLOBLEM_KEY = 'problem'\r\n  const ALTERNATIVES_KEY = 'alternatives'\r\n  const CUSTOMER_KEY = 'customer'\r\n  const EARLYADOPTERS_KEY = 'earlyAdopters'\r\n  const UNIQUEVALUE_KEY = 'uniqueValue'\r\n  const SOLUTION_KEY = 'solution'\r\n  const CHANNELS_KEY = 'channels'\r\n  const REVENUE_KEY = 'revenue'\r\n  const COST_KEY = 'cost'\r\n  const KEYMETRICS_KEY = 'keyMetrics'\r\n  const UNFAIRADVANTAGE_KEY = 'unfairAdvantage'\r\n\r\n  const initValue = (key, dispatch) => {\r\n    const initVal = sessionStorage.getItem(key);\r\n    dispatch(initVal ? JSON.parse(initVal) : \"\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    initValue(PLOBLEM_KEY, setProblem)\r\n    initValue(ALTERNATIVES_KEY, setAlternatives)\r\n    initValue(CUSTOMER_KEY, setCustomer)\r\n    initValue(EARLYADOPTERS_KEY, setEarlyAdopters)\r\n    initValue(UNIQUEVALUE_KEY, setUniqueValue)\r\n    initValue(SOLUTION_KEY, setSolution)\r\n    initValue(CHANNELS_KEY, setChannels)\r\n    initValue(REVENUE_KEY, setRevenue)\r\n    initValue(COST_KEY, setCost)\r\n    initValue(KEYMETRICS_KEY, setKeyMetrics)\r\n    initValue(UNFAIRADVANTAGE_KEY, setUnfairAdvantage)\r\n  }, []);\r\n\r\n  const mounted = useRef(false)\r\n  useEffect(() => {\r\n    if(mounted.current) {\r\n      sessionStorage[PLOBLEM_KEY] = JSON.stringify(problem);\r\n      sessionStorage[ALTERNATIVES_KEY] = JSON.stringify(alternatives);\r\n      sessionStorage[CUSTOMER_KEY] = JSON.stringify(customer);\r\n      sessionStorage[EARLYADOPTERS_KEY] = JSON.stringify(earlyAdopters);\r\n      sessionStorage[UNIQUEVALUE_KEY] = JSON.stringify(uniqueValue);\r\n      sessionStorage[SOLUTION_KEY] = JSON.stringify(solution);\r\n      sessionStorage[CHANNELS_KEY] = JSON.stringify(channels);\r\n      sessionStorage[REVENUE_KEY] = JSON.stringify(revenue);\r\n      sessionStorage[COST_KEY] = JSON.stringify(cost);\r\n      sessionStorage[KEYMETRICS_KEY] = JSON.stringify(keyMetrics);\r\n      sessionStorage[UNFAIRADVANTAGE_KEY] = JSON.stringify(unfairAdvantage);\r\n    } else {\r\n      mounted.current = true\r\n    }\r\n  }, [problem, alternatives, customer, earlyAdopters, uniqueValue, solution, channels, revenue, cost, keyMetrics, unfairAdvantage])\r\n\r\n\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Box className={classes.container}>\r\n        <Paper elevation={3} >\r\n          <Grid container item className={classes.glidItemsHorizontal}>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForTablet setProblem={setProblem} textClear={textClear}/>\r\n                  <FormTextField\r\n                    label=\"①課題\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={problem}\r\n                    onChange={e => setProblem(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n                <TextClearButtonForTablet setAlternatives={setAlternatives} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"②既存の代替品\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={alternatives}\r\n                  onChange={e => setAlternatives(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container item className={classes.glidItemsHorizontal}>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForTablet setCustomer={setCustomer} textClear={textClear}/>\r\n                  <FormTextField\r\n                    label=\"③顧客セグメント\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={customer}\r\n                    onChange={e => setCustomer(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForTablet setEarlyAdopters={setEarlyAdopters} textClear={textClear}/>\r\n                  <FormTextField\r\n                    label=\"④アーリーアダプター\"\r\n                    className={classes.margin}\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={earlyAdopters}\r\n                    onChange={e => setEarlyAdopters(e.target.value)}\r\n                  />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container item className={classes.glidItemsHorizontal}>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForTablet setUniqueValue={setUniqueValue} textClear={textClear}/>\r\n                <FormTextField\r\n                    label=\"⑤独自の価値提案\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={uniqueValue}\r\n                    onChange={e => setUniqueValue(e.target.value)}\r\n                  />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container item className={classes.glidItemsHorizontal}>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForTablet setSolution={setSolution} textClear={textClear}/>\r\n                <FormTextField\r\n                    label=\"⑥ソリューション\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={solution}\r\n                    onChange={e => setSolution(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForTablet setChannels={setChannels} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"⑦チャネル\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={channels}\r\n                  onChange={e => setChannels(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid container item className={classes.glidItemsHorizontal}>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForTablet setRevenue={setRevenue} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"⑧収益の流れ\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={cost}\r\n                  onChange={e => setCost(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForTablet setCost={setCost} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"⑨コスト構造\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={revenue}\r\n                  onChange={e => setRevenue(e.target.value)}\r\n                />\r\n              </Grid>\r\n          </Grid>\r\n          <Grid container item className={classes.glidItemsHorizontal}>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForTablet setKeyMetrics={setKeyMetrics} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"⑩主要指標\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={keyMetrics}\r\n                  onChange={e => setKeyMetrics(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForTablet setUnfairAdvantage={setUnfairAdvantage} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"⑪圧倒的な優位性\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={unfairAdvantage}\r\n                  onChange={e => setUnfairAdvantage(e.target.value)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n        </Paper>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default LeanCanvasForTablet;","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForLaptop/ButtonGroupForLaptop.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForTablet/ButtonGroupForTablet.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForMobile/ButtonGroupForMobile.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForMobile/LeanCanvasForMobile.js",["133"],"import React, {useEffect, useRef} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n  fade,\r\n} from '@material-ui/core/styles';\r\n\r\nimport TextClearButtonForMobile from './TextClearButtonForMobile'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    paddingBottom: 150\r\n  },\r\n  container: {\r\n    marginTop: \"3%\",\r\n    marginBottom: \"3%\",\r\n    marginLeft: 8,\r\n    marginRight: 8,\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  glidItemsHorizontal: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  glidItem: {\r\n    position: 'relative',\r\n  },\r\n  gridItemTwoRow: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  },\r\n  color: {\r\n    color: \"red\"\r\n  }\r\n});\r\n\r\n\r\nconst useStylesForm = makeStyles((theme) => ({\r\n  root: {\r\n    borderTop: '3px solid #e2e2e1',\r\n    borderBottom: '3px solid #e2e2e1',\r\n    borderLeft: '3px solid #e2e2e1',\r\n    borderRight: '3px solid #e2e2e1',\r\n    overflow: 'hidden',\r\n    borderRadius: 0,\r\n    backgroundColor: '#fff',\r\n    transition: theme.transitions.create(['border-color', 'box-shadow']),\r\n    '&:hover': {\r\n      backgroundColor: '#fafafa',\r\n      borderColor: \"#c8c8c8\",\r\n    },\r\n    '&$focused': {\r\n      backgroundColor: '#fff',\r\n      boxshadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 2px inset`,\r\n      borderColor: theme.palette.primary.main,\r\n    },\r\n  },\r\n  focused: {},\r\n}));\r\n\r\nconst FormTextField = ({...props}) => {\r\n  const classes = useStylesForm()\r\n  return <TextField InputProps={{ classes, disableUnderline: true }} {...props} />;\r\n}\r\n\r\nconst LeanCanvasForMobile = (props) => {\r\n  const classes = useStyles();\r\n  const {\r\n    problem,\r\n    setProblem,\r\n    alternatives,\r\n    setAlternatives,\r\n    customer,\r\n    setCustomer,\r\n    earlyAdopters,\r\n    setEarlyAdopters,\r\n    uniqueValue,\r\n    setUniqueValue,\r\n    solution,\r\n    setSolution,\r\n    channels,\r\n    setChannels,\r\n    revenue,\r\n    setRevenue,\r\n    cost,\r\n    setCost,\r\n    keyMetrics,\r\n    setKeyMetrics,\r\n    unfairAdvantage,\r\n    setUnfairAdvantage,\r\n    textClear,\r\n  } = props\r\n\r\n  const PLOBLEM_KEY = 'problem'\r\n  const ALTERNATIVES_KEY = 'alternatives'\r\n  const CUSTOMER_KEY = 'customer'\r\n  const EARLYADOPTERS_KEY = 'earlyAdopters'\r\n  const UNIQUEVALUE_KEY = 'uniqueValue'\r\n  const SOLUTION_KEY = 'solution'\r\n  const CHANNELS_KEY = 'channels'\r\n  const REVENUE_KEY = 'revenue'\r\n  const COST_KEY = 'cost'\r\n  const KEYMETRICS_KEY = 'keyMetrics'\r\n  const UNFAIRADVANTAGE_KEY = 'unfairAdvantage'\r\n\r\n  const initValue = (key, dispatch) => {\r\n    const initVal = sessionStorage.getItem(key);\r\n    dispatch(initVal ? JSON.parse(initVal) : \"\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    initValue(PLOBLEM_KEY, setProblem)\r\n    initValue(ALTERNATIVES_KEY, setAlternatives)\r\n    initValue(CUSTOMER_KEY, setCustomer)\r\n    initValue(EARLYADOPTERS_KEY, setEarlyAdopters)\r\n    initValue(UNIQUEVALUE_KEY, setUniqueValue)\r\n    initValue(SOLUTION_KEY, setSolution)\r\n    initValue(CHANNELS_KEY, setChannels)\r\n    initValue(REVENUE_KEY, setRevenue)\r\n    initValue(COST_KEY, setCost)\r\n    initValue(KEYMETRICS_KEY, setKeyMetrics)\r\n    initValue(UNFAIRADVANTAGE_KEY, setUnfairAdvantage)\r\n  }, []);\r\n\r\n  const mounted = useRef(false)\r\n  useEffect(() => {\r\n    if(mounted.current) {\r\n      sessionStorage[PLOBLEM_KEY] = JSON.stringify(problem);\r\n      sessionStorage[ALTERNATIVES_KEY] = JSON.stringify(alternatives);\r\n      sessionStorage[CUSTOMER_KEY] = JSON.stringify(customer);\r\n      sessionStorage[EARLYADOPTERS_KEY] = JSON.stringify(earlyAdopters);\r\n      sessionStorage[UNIQUEVALUE_KEY] = JSON.stringify(uniqueValue);\r\n      sessionStorage[SOLUTION_KEY] = JSON.stringify(solution);\r\n      sessionStorage[CHANNELS_KEY] = JSON.stringify(channels);\r\n      sessionStorage[REVENUE_KEY] = JSON.stringify(revenue);\r\n      sessionStorage[COST_KEY] = JSON.stringify(cost);\r\n      sessionStorage[KEYMETRICS_KEY] = JSON.stringify(keyMetrics);\r\n      sessionStorage[UNFAIRADVANTAGE_KEY] = JSON.stringify(unfairAdvantage);\r\n    } else {\r\n      mounted.current = true\r\n    }\r\n  }, [problem, alternatives, customer, earlyAdopters, uniqueValue, solution, channels, revenue, cost, keyMetrics, unfairAdvantage])\r\n\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Box className={classes.container}>\r\n        <Paper elevation={3} >\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForMobile setProblem={setProblem} textClear={textClear}/>\r\n                  <FormTextField\r\n                    label=\"①課題\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={problem}\r\n                    onChange={e => setProblem(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n                <TextClearButtonForMobile setAlternatives={setAlternatives} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"②既存の代替品\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={alternatives}\r\n                  onChange={e => setAlternatives(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForMobile setCustomer={setCustomer} textClear={textClear}/>\r\n                  <FormTextField\r\n                    label=\"③顧客セグメント\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={customer}\r\n                    onChange={e => setCustomer(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForMobile setEarlyAdopters={setEarlyAdopters} textClear={textClear}/>\r\n                  <FormTextField\r\n                    label=\"④アーリーアダプター\"\r\n                    className={classes.margin}\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={earlyAdopters}\r\n                    onChange={e => setEarlyAdopters(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForMobile setUniqueValue={setUniqueValue} textClear={textClear}/>\r\n                <FormTextField\r\n                    label=\"⑤独自の価値提案\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={uniqueValue}\r\n                    onChange={e => setUniqueValue(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForMobile setSolution={setSolution} textClear={textClear}/>\r\n                <FormTextField\r\n                    label=\"⑥ソリューション\"\r\n                    variant=\"filled\"\r\n                    id=\"form-input\"\r\n                    multiline\r\n                    rows={7}\r\n                    fullWidth\r\n                    value={solution}\r\n                    onChange={e => setSolution(e.target.value)}\r\n                  />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForMobile setChannels={setChannels} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"⑦チャネル\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={channels}\r\n                  onChange={e => setChannels(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForMobile setRevenue={setRevenue} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"⑧収益の流れ\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={cost}\r\n                  onChange={e => setCost(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForMobile setCost={setCost} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"⑨コスト構造\"\r\n                  className={classes.margin}\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={revenue}\r\n                  onChange={e => setRevenue(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForMobile setKeyMetrics={setKeyMetrics} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"⑩主要指標\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={keyMetrics}\r\n                  onChange={e => setKeyMetrics(e.target.value)}\r\n                />\r\n              </Grid>\r\n              <Grid item xs className={classes.glidItem}>\r\n              <TextClearButtonForMobile setUnfairAdvantage={setUnfairAdvantage} textClear={textClear}/>\r\n                <FormTextField\r\n                  label=\"⑪圧倒的な優位性\"\r\n                  variant=\"filled\"\r\n                  id=\"form-input\"\r\n                  multiline\r\n                  rows={7}\r\n                  fullWidth\r\n                  value={unfairAdvantage}\r\n                  onChange={e => setUnfairAdvantage(e.target.value)}\r\n                />\r\n              </Grid>\r\n        </Paper>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default LeanCanvasForMobile;","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForDesktop/ButtonGroupForDesktop.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/reducers/LeanCanvasContentReducer.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/actions/index.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForTablet/TextClearButtonForTablet.js",["134"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n  fab: {\r\n      position: 'absolute',\r\n      zIndex: 2,\r\n      right: 3,\r\n      padding: 8\r\n    },\r\n}));\r\n\r\nconst TextClearButtonForTablet = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const thisTextClear = props.textClear\r\n  const textClear = () => {\r\n    if (props.setProblem) {props.setProblem(\"\") }\r\n    if (props.setAlternatives) props.setAlternatives(\"\")\r\n    if (props.setCustomer) props.setCustomer(\"\")\r\n    if (props.setEarlyAdopters) props.setEarlyAdopters(\"\")\r\n    if (props.setUniqueValue) props.setUniqueValue(\"\")\r\n    if (props.setSolution) props.setSolution(\"\")\r\n    if (props.setChannels) props.setChannels(\"\")\r\n    if (props.setRevenue) props.setRevenue(\"\")\r\n    if (props.setCost) props.setCost(\"\")\r\n    if (props.setKeyMetrics) props.setKeyMetrics(\"\")\r\n    if (props.setUnfairAdvantage) props.setUnfairAdvantage(\"\")\r\n  }\r\n\r\n  return (\r\n    <IconButton aria-label=\"delete\" size=\"medium\" onClick={textClear} className={classes.fab}>\r\n      <DeleteIcon />\r\n    </IconButton>\r\n  );\r\n}\r\n\r\nexport default TextClearButtonForTablet;","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/DownLoadSpredSheetButton.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForTablet/DownLoadSpredSheetButtonForTabet.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/AllTextClearButton.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForMobile/TextClearButtonForMobile.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ChangeColorTextButton.js",[],["135","136"],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/ForMobile/DownLoadSpredSheetButtonForMobile.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/FinishModal.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/PreparationModal.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/components/CustomizedProgressBars.js",["137"],"import React, {useState, useEffect} from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst BorderLinearProgress = withStyles((theme) => ({\r\n  root: {\r\n    height: 15,\r\n    borderRadius: 15,\r\n  },\r\n  colorPrimary: {\r\n    backgroundColor: theme.palette.grey[theme.palette.type === 'light' ? 200 : 700],\r\n  },\r\n  bar: {\r\n    borderRadius: 5,\r\n    backgroundColor: '#1a90ff',\r\n  },\r\n}))(LinearProgress);\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\nconst CustomizedProgressBars = (props) => {\r\n  const classes = useStyles();\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  const setOpenPreparationModal = props.setOpenPreparationModal\r\n  const setOpenFinishModal = props.setOpenFinishModal\r\n  const isArrivedUrl = props.isArrivedUrl\r\n  const setIsArrivedUrl = props.setIsArrivedUrl\r\n\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setProgress((prevProgress) => (prevProgress >= 100 ? (()=>{clearInterval(timer); return 100;})() : prevProgress + 5));\r\n    }, 400);\r\n    return () => clearInterval(timer);\r\n  }, []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if ((isArrivedUrl)&&(progress>=100)) {\r\n      setTimeout(() => {\r\n        setOpenPreparationModal(false)\r\n        setIsArrivedUrl(false)\r\n        setOpenFinishModal(true)\r\n      }, 100);\r\n    }\r\n  }, [isArrivedUrl,progress]\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <BorderLinearProgress variant=\"determinate\" value={progress} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomizedProgressBars","/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/utilty/randomQuote.js",[],"/Users/hayashikouji/Documents/workspace/exportLeanCanvas/src/env.js",[],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":76,"column":11,"nodeType":"144","messageId":"145","endLine":76,"endColumn":16},{"ruleId":"146","severity":1,"message":"147","line":184,"column":6,"nodeType":"148","endLine":184,"endColumn":8,"suggestions":"149"},{"ruleId":"146","severity":1,"message":"147","line":183,"column":6,"nodeType":"148","endLine":183,"endColumn":8,"suggestions":"150"},{"ruleId":"146","severity":1,"message":"147","line":129,"column":6,"nodeType":"148","endLine":129,"endColumn":8,"suggestions":"151"},{"ruleId":"146","severity":1,"message":"147","line":129,"column":6,"nodeType":"148","endLine":129,"endColumn":8,"suggestions":"152"},{"ruleId":"142","severity":1,"message":"153","line":24,"column":9,"nodeType":"144","messageId":"145","endLine":24,"endColumn":22},{"ruleId":"138","replacedBy":"154"},{"ruleId":"140","replacedBy":"155"},{"ruleId":"146","severity":1,"message":"156","line":51,"column":6,"nodeType":"148","endLine":51,"endColumn":29,"suggestions":"157"},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setAlternatives', 'setChannels', 'setCost', 'setCustomer', 'setEarlyAdopters', 'setKeyMetrics', 'setProblem', 'setRevenue', 'setSolution', 'setUnfairAdvantage', and 'setUniqueValue'. Either include them or remove the dependency array.","ArrayExpression",["160"],["161"],["162"],["163"],"'thisTextClear' is assigned a value but never used.",["158"],["159"],"React Hook useEffect has missing dependencies: 'setIsArrivedUrl', 'setOpenFinishModal', and 'setOpenPreparationModal'. Either include them or remove the dependency array.",["164"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"165","fix":"167"},{"desc":"165","fix":"168"},{"desc":"165","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [setAlternatives, setChannels, setCost, setCustomer, setEarlyAdopters, setKeyMetrics, setProblem, setRevenue, setSolution, setUnfairAdvantage, setUniqueValue]",{"range":"172","text":"173"},{"range":"174","text":"173"},{"range":"175","text":"173"},{"range":"176","text":"173"},"Update the dependencies array to be: [isArrivedUrl, progress, setIsArrivedUrl, setOpenFinishModal, setOpenPreparationModal]",{"range":"177","text":"178"},[4750,4752],"[setAlternatives, setChannels, setCost, setCustomer, setEarlyAdopters, setKeyMetrics, setProblem, setRevenue, setSolution, setUnfairAdvantage, setUniqueValue]",[4736,4738],[3403,3405],[3404,3406],[1402,1425],"[isArrivedUrl, progress, setIsArrivedUrl, setOpenFinishModal, setOpenPreparationModal]"]